diff --git a/Makefile b/Makefile
index a074a80..32d7260 100644
--- a/Makefile
+++ b/Makefile
@@ -143,6 +143,7 @@ UPROGS=\
 	$U/_bcachetest\
 	$U/_alloctest\
 	$U/_bigfile\
+	$U/_mmaptest\
 
 fs.img: mkfs/mkfs README user/xargstest.sh $(UPROGS)
 	mkfs/mkfs fs.img README user/xargstest.sh $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index 8a2171a..a2720fc 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -104,6 +104,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             mmap_handler(uint64);
+int             munmap(uint64,int);
+uint64          mmap(int,int,int,int,int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -171,6 +174,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            unmap_helper(pagetable_t, uint64,int);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index b6edbe6..1e738e5 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -71,7 +71,8 @@ exec(char *path, char **argv)
   uvmclear(pagetable, sz-2*PGSIZE);
   sp = sz;
   stackbase = sp - PGSIZE;
-
+  p->ustack = stackbase;
+  
   // Push argument strings, prepare rest of stack in ustack.
   for(argc = 0; argv[argc]; argc++) {
     if(argc >= MAXARG)
diff --git a/kernel/fcntl.h b/kernel/fcntl.h
index d565483..b248872 100644
--- a/kernel/fcntl.h
+++ b/kernel/fcntl.h
@@ -2,3 +2,7 @@
 #define O_WRONLY  0x001
 #define O_RDWR    0x002
 #define O_CREATE  0x200
+#define PROT_READ 0x001
+#define PROT_WRITE 0x002
+#define MAP_SHARED 0x004
+#define MAP_PRIVATE 0x008
diff --git a/kernel/proc.c b/kernel/proc.c
index c678813..c4a84db 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -8,6 +8,7 @@
 #include "file.h"
 #include "proc.h"
 #include "defs.h"
+#include "fcntl.h"
 
 struct cpu cpus[NCPU];
 
@@ -117,6 +118,10 @@ found:
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
 
+  //Init VMA values
+  for(int i = 0; i < VMASIZE; i++){
+	p->vmas[i].taken = 0;
+  }
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof p->context);
@@ -261,8 +266,23 @@ fork(void)
     release(&np->lock);
     return -1;
   }
+  //Modify Fork to have the same mappings as the parent(vmas)
+  for(int i = 0; i < VMASIZE; i++){
+    if(p->vmas[i].taken){
+      filedup(p->vmas[i].f);
+      np->vmas[i].prot = p->vmas[i].prot;
+      np->vmas[i].addr = p->vmas[i].addr;
+      np->vmas[i].fd = p->vmas[i].fd;
+      np->vmas[i].f = p->vmas[i].f;
+      np->vmas[i].off = p->vmas[i].off;
+      np->vmas[i].len = p->vmas[i].len;
+      np->vmas[i].flags = p->vmas[i].flags;
+      np->vmas[i].taken = p->vmas[i].taken;
+    }
+  }
+  np->maxaddr = p->maxaddr;
   np->sz = p->sz;
-
+  np->ustack = p->ustack;
   np->parent = p;
 
   // copy saved user registers.
@@ -333,7 +353,13 @@ exit(int status)
       p->ofile[fd] = 0;
     }
   }
-
+//Step 6: Get rid of all the vmas and close the file, similar to munmap
+for(int i = 0; i < VMASIZE; i++){
+  if(p->vmas[i].taken){
+    unmap_helper(p->pagetable,p->vmas[i].addr,p->vmas[i].len);
+    fileclose(p->vmas[i].f);
+  }
+}
   begin_op(ROOTDEV);
   iput(p->cwd);
   end_op(ROOTDEV);
@@ -690,3 +716,130 @@ procdump(void)
     printf("\n");
   }
 }
+
+//Handles mmap() lazy page allocation
+int mmap_handler(uint64 va){
+  char *mem;
+  struct proc *p = myproc();
+  if(!p->vmas[0].taken){  //If there is no vmas, return -1
+      return -1;
+  }
+
+	//find which VMA we are at
+	int i = 0;
+  for(; i < 16; i++ ){
+    if( (p->vmas[i].addr <= va ) &&  (va < (p->vmas[i].addr + p->vmas[i].len) )){
+        break;
+    }
+  }
+  if(i == 16){
+      return -1;
+  }
+
+	//Allocate exactly one page of physical memory
+  mem = kalloc();
+  if(mem == 0){
+      return -1;
+  }
+  memset(mem, 0, PGSIZE);
+
+	//Read 4096 bytes of the relevant file into user space
+  struct file *f = p->vmas[i].f;
+	ilock(f->ip);
+	if(readi(f->ip,0,(uint64)mem, PGROUNDDOWN(va) - p->vmas[i].addr,PGSIZE) < 0){
+		iunlock(f->ip);
+		kfree(mem);
+    return -1;
+  }
+	iunlock(f->ip);
+
+	//set flags
+  int prot = PTE_V;
+  if(p->vmas[i].prot & PROT_READ)
+  prot |= PTE_R;
+  if(p->vmas[i].prot & PROT_WRITE)
+  prot |= PTE_W;
+	//mappages
+  if(mappages(p->pagetable, PGROUNDDOWN(va), PGSIZE, (uint64)mem, prot|PTE_X|PTE_U) != 0){
+      kfree(mem);
+      return -1;
+   }
+   return 1;
+}
+
+int munmap(uint64 addr, int length){
+  struct proc *p = myproc();
+  struct file *f;
+  //  find the right VMA
+  int i = 0;
+  for(; i < 16; i++ ){
+    if( (p->vmas[i].addr <= addr ) &&  (addr < (p->vmas[i].addr + p->vmas[i].len) )){
+        break;
+    }
+  }
+  f = p->vmas[i].f;
+	//	if it shared, writeback to disk
+  if(p->vmas[i].flags & MAP_SHARED){
+      begin_op(f->ip->dev);
+      ilock(f->ip);
+      writei(f->ip, 1, addr, 0, length);  //4th argument is the offset
+      iunlock(f->ip);
+      end_op(f->ip->dev);
+  }
+
+	//  unmap PTE & free
+  unmap_helper(p->pagetable,addr,length);
+  
+	//  assumed etiher at beginning(1) or end(2) 
+  if(addr == p->vmas[i].addr){  //(1)
+  p->vmas[i].addr = p->vmas[i].addr + length;
+  p->vmas[i].len -= length;
+  }
+  else if(addr > p->vmas[i].addr){  //(2)
+  p->vmas[i].len -= length;
+  }
+  else{
+    return -1;
+  }
+  if(p->vmas[i].len <= 0){
+    fileclose(p->vmas[i].f);
+    p->vmas[i].taken = 0;
+    p->vmas[i].len = 0;
+  }
+	//close the file
+	return 1;
+}
+
+uint64 mmap(int len, int prot, int flags, int fd, int off){
+  struct file *f;
+  struct proc *p = myproc();
+  if(!p->maxaddr){p->maxaddr = TRAPFRAME - (PGSIZE*2);}
+  //Check if file descriptor is valid
+	if(fd > NOFILE ||(f=p->ofile[fd])==0)
+    return 0xffffffffffffffff;
+	//Check if shared/read/write
+    if((flags & MAP_SHARED) && (!f->writable) && (prot & PROT_WRITE)){
+      return 0xffffffffffffffff;
+    }
+  uint64 mapaddr = p->maxaddr;
+  p->maxaddr = mapaddr - len;
+	f = filedup(f);
+	if(f==0)
+    return 0xffffffffffffffff;
+	//Find an availaable vma
+  int i = 0;
+	for(; i < VMASIZE; i++){
+    if(!p->vmas[i].taken) break;
+  }
+  if(i == VMASIZE)
+    return 0xffffffffffffffff;
+  p->vmas[i].taken = 1;
+  p->vmas[i].len = len;
+  p->vmas[i].prot = prot;
+  p->vmas[i].flags = flags;
+  p->vmas[i].f = f;
+  p->vmas[i].fd = fd;
+  p->vmas[i].off = off;
+  p->vmas[i].addr = mapaddr;
+	return mapaddr;	
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index 812c769..f90f124 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -18,6 +18,19 @@ struct context {
   uint64 s11;
 };
 
+//Part2
+#define VMASIZE 16
+struct vma{
+int len;
+int fd;
+struct file *f;
+int prot;
+int flags;
+uint64 addr;
+int off;
+int taken;
+};
+
 // Per-CPU state.
 struct cpu {
   struct proc *proc;          // The process running on this cpu, or null.
@@ -96,11 +109,14 @@ struct proc {
 
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
+  uint64 ustack;               // Stores bottom of user stack
   uint64 sz;                   // Size of process memory (bytes)
+  uint64 maxaddr;              // Size of maxaddr
   pagetable_t pagetable;       // Page table
   struct trapframe *tf;        // data page for trampoline.S
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  struct vma vmas[VMASIZE];    // Part 2: Add vma struct(array of size 16) to proc struct 
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ec78f3d..e89c9cc 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -105,6 +105,8 @@ extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
 extern uint64 sys_ntas(void);
+extern uint64 sys_mmap(void);
+extern uint64 sys_munmap(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -129,6 +131,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_ntas]    sys_ntas,
+[SYS_mmap]    sys_mmap,
+[SYS_munmap]  sys_munmap
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index d329a6c..12ef892 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -23,3 +23,5 @@
 
 // System calls for labs
 #define SYS_ntas   22
+#define SYS_mmap   23
+#define SYS_munmap 24
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 032a164..21c0cc0 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -16,6 +16,7 @@
 #include "file.h"
 #include "fcntl.h"
 
+
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
 static int
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..e45c4fb 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -95,3 +95,24 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64 sys_mmap(void){
+	int prot,flags,len,fd, off;
+
+  //Check Arguments
+  if( (argint(1, &len) < 0) || (argint(2, &prot)<0)|| (argint(3, &flags)<0) || (argint(4, &fd)<0) || (argint(5, &off) < 0))
+    return 0xffffffffffffffff;
+
+  return mmap(len,prot,flags,fd,off);
+}
+
+uint64 sys_munmap(void){
+	uint64 addr;
+	int length;
+
+  if(argaddr(0,&addr) < 0 || argint(1,&length) < 0){
+    return -1;
+  }
+	
+  return munmap(addr,length);
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index ca07db5..571b718 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -68,14 +68,26 @@ usertrap(void)
     intr_on();
 
     syscall();
-  } else if((which_dev = devintr()) != 0){
+  } //Lazy Allocaiton for mmap() 
+  else if(r_scause()==13||r_scause()==15){
+    //Safety Checks on VA (Borrowed From Lab 2 Solutuion) (I didn't finish Lab2)
+    if(r_stval() <= p->ustack){
+      p->killed = 1;
+      goto end;
+    }
+    if(mmap_handler(r_stval()) < 0){
+      p->killed = 1;
+      goto end;
+    }
+	} 
+  else if((which_dev = devintr()) != 0){
     // ok
   } else {
     printf("usertrap(): unexpected scause %p (%s) pid=%d\n", r_scause(), scause_desc(r_scause()), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     p->killed = 1;
   }
-
+  end:
   if(p->killed)
     exit(-1);
 
diff --git a/kernel/vm.c b/kernel/vm.c
index dd65184..ea78a83 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -451,3 +451,12 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+void unmap_helper(pagetable_t pagetable, uint64 addr, int len){
+  pte_t *pte;
+  while( (*(pte = walk(pagetable,addr,0)) & PTE_V) && len > 0){
+    uvmunmap(pagetable,addr,PGSIZE,0);
+    addr+= PGSIZE;
+    len-=PGSIZE;
+  }
+}
\ No newline at end of file
diff --git a/mydiff5.diff b/mydiff5.diff
new file mode 100644
index 0000000..e69de29
diff --git a/user/mmaptest.c b/user/mmaptest.c
index 691e8b1..176e72e 100644
--- a/user/mmaptest.c
+++ b/user/mmaptest.c
@@ -121,6 +121,7 @@ mmap_test(void)
   if (munmap(p, PGSIZE*2) == -1)
     err("munmap (1)");
 
+
   // should be able to map file opened read-only with private writable
   // mapping
   p = mmap(0, PGSIZE*2, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);
@@ -262,11 +263,12 @@ fork_test(void)
   int status = -1;
   wait(&status);
 
+  
   if(status != 0){
     printf("fork_test failed\n");
     exit(1);
   }
-
+  
   // check that the parent's mappings are still there.
   _v1(p1);
   _v1(p2);
diff --git a/user/user.h b/user/user.h
index 9fa1921..f8c06d5 100644
--- a/user/user.h
+++ b/user/user.h
@@ -27,6 +27,8 @@ int ntas();
 int crash(const char*, int);
 int mount(char*, char *);
 int umount(char*);
+void* mmap(void*, int, int, int, int, int);	//Part1
+int munmap(void*, int);				//Part1
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 1645c2b..9beb620 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -37,3 +37,5 @@ entry("sbrk");
 entry("sleep");
 entry("uptime");
 entry("ntas");
+entry("mmap");
+entry("munmap");
