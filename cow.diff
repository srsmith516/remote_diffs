diff --git a/kernel/defs.h b/kernel/defs.h
index c3934d4..47468c3 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -62,6 +62,8 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit();
+int 		getref(uint64);
+void 		incref(uint64);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -171,6 +173,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int		is_cow(pagetable_t, uint64);
+uint64		cow(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..01a5c1c 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -18,6 +18,11 @@ struct run {
   struct run *next;
 };
 
+struct {
+	struct	spinlock lock;
+	int arr[(PHYSTOP)/PGSIZE];
+} refs;
+
 struct {
   struct spinlock lock;
   struct run *freelist;
@@ -26,6 +31,7 @@ struct {
 void
 kinit()
 {
+  initlock(&refs.lock, "refs");
   initlock(&kmem.lock, "kmem");
   freerange(end, (void*)PHYSTOP);
 }
@@ -35,8 +41,11 @@ freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
-    kfree(p);
+  
+  
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE){
+       kfree(p);
+  }
 }
 
 // Free the page of physical memory pointed at by v,
@@ -50,7 +59,14 @@ kfree(void *pa)
 
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
-
+  
+  acquire(&refs.lock);
+  refs.arr[(((uint64)pa)/PGSIZE)]--;		//Decrease the reference count
+  int ref = refs.arr[(uint64)pa/PGSIZE];
+  release(&refs.lock);
+  if( ref > 0){					//If there are still references, do not free
+	  return;
+  }
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
@@ -69,14 +85,39 @@ void *
 kalloc(void)
 {
   struct run *r;
-
-  acquire(&kmem.lock);
+  
+  acquire(&kmem.lock); 
   r = kmem.freelist;
-  if(r)
+  if(r){
     kmem.freelist = r->next;
+  }
   release(&kmem.lock);
-
-  if(r)
+  
+  if(r){
+    acquire(&refs.lock);
+    refs.arr[(uint64)r/PGSIZE] = 1;     //Set reference count to zero
+    release(&refs.lock);
     memset((char*)r, 5, PGSIZE); // fill with junk
+  }
   return (void*)r;
 }
+
+void incref(uint64 pa){
+	int ref;
+	if( ((uint64)pa % PGSIZE) != 0 || pa >= PHYSTOP || (char*)pa < end )	//Error Checks
+		panic("Inc ref");
+	acquire(&refs.lock);
+	ref = refs.arr[(((uint64)pa)/PGSIZE)];
+	ref++;						//Increase the reference count
+	refs.arr[(((uint64)pa)/PGSIZE)] = ref;
+	release(&refs.lock);
+	return;
+}
+
+int getref(uint64 pa){	//Gets the reference count at a physical addr
+	int ref;
+	acquire(&refs.lock);
+	ref = refs.arr[(((uint64)pa)/PGSIZE)];
+	release(&refs.lock);
+	return ref;
+}
diff --git a/kernel/riscv.h b/kernel/riscv.h
index f46ba59..a97e39d 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -332,6 +332,7 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_COW (1L << 8) // 1 -> Is COW page
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index 51a7805..9118fbe 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,12 +67,29 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  } else if( r_scause() == 15 ){	//Pagefault -> COW
+	uint64 va = PGROUNDDOWN(r_stval());		   //Get VA
+	if( r_scause() >= p->sz || r_scause() >= MAXVA || (r_scause() < p->tf->sp && r_scause() >= (p->tf->sp - PGSIZE))){   //Safety Checks
+		p->killed = 1;
+		goto end;
+	}
+	if( !is_cow(p->pagetable, r_scause())){		   //Check if COW page
+		p->killed = 1;
+		goto end;
+	}
+	if( cow(p->pagetable, va) == -1){			   //Handle COW Pagefault
+		p->killed = 1;
+		goto end;
+	}
+  } 
+  
+  else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     p->killed = 1;
   }
 
+end: 
   if(p->killed)
     exit(-1);
 
diff --git a/kernel/vm.c b/kernel/vm.c
index dd65184..a0e1d15 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -322,7 +322,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -331,11 +331,12 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    flags &= (~PTE_W);		//Clear Write permission
+    flags |= PTE_COW;		//Mark COW 
+    *pte &= (~PTE_W);		//Set the parents flags
+    *pte |= PTE_COW;            //
+    incref(pa);			//Increase reference to this page
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){	//Copy parents pagetable to Child pagetable
       goto err;
     }
   }
@@ -366,10 +367,16 @@ int
 copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
-
+  
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
+
+    //If this page is COW, copy out to COW page instead
+    if(is_cow(pagetable,va0)){		//Call is COW For safety checks
+	  pa0 = cow(pagetable, va0);
+    }
+
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
@@ -451,3 +458,52 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+//Checks if a page is copy on write
+int is_cow(pagetable_t pagetable, uint64 va){
+	if( va >= MAXVA)
+		return 0;
+	pte_t *pte = walk(pagetable,va,0);
+	if( (*pte & PTE_V) == 0 || pte ==0){
+		return 0;
+	}
+	return ( *pte & PTE_COW);
+}
+
+//Allocates page if more than one reference, just clear flags if last reference
+//Return physical address in both cases
+uint64 cow(pagetable_t pagetable, uint64 va){
+	pte_t *pte;
+	uint flags;
+	void* mem;
+	uint64 pa;
+
+	pte = walk(pagetable, va, 0);	
+	pa = PTE2PA(*pte);		
+	if( va% PGSIZE){		//make sure VA is page aligned
+		return -1;
+	}
+	
+	flags = PTE_FLAGS(*pte);	//Add Write permission, clear COW page
+	flags |= PTE_W;		
+	flags &= (~PTE_COW);
+         if(getref(pa) == 1){		//GET references to Phys Addr
+		*pte |= PTE_W;		//If last reference, set flags and return Phys Addr
+		*pte &= ~PTE_COW;
+                return pa;
+        }
+	mem = kalloc();			//Otherwise, allocate memory for a new page
+	if(mem == 0){
+		return -1;
+	}
+	memmove( mem, (void*)pa, PGSIZE); 	//Copy the contents of pa -> new page
+	*pte &= (~PTE_V);			//Clear the valid flag for remap
+	if(mappages(pagetable,va,PGSIZE,(uint64)mem,flags)!= 0){	//map PTE
+			kfree(mem);
+			*pte |= PTE_V;
+			return -1;
+	}	//map the page
+	
+	kfree((void*)pa);			//Effectively decreases the ref
+	return (uint64)mem;			//return the memory cow has allocated
+}
